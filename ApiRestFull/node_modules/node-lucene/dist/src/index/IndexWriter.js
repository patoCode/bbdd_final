"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_java_rt_1 = require("node-java-rt");
const getLuceneJava_1 = require("../util/getLuceneJava");
class IndexWriter extends node_java_rt_1.lang.Object /* TODO: implements lots of things */ {
    constructor(index, writerConfig) {
        super();
        this._java = getLuceneJava_1.getLuceneJava().newInstanceSync(IndexWriter._javaClassName(), index._java, writerConfig._java);
    }
    static _javaClassName() {
        return 'org.apache.lucene.index.IndexWriter';
    }
    ramBytesUsedSync() {
        return this._java.ramBytesUsedSync();
    }
    ramBytesUsedAsync(callback) {
        this._java.ramBytesUsedAsync(callback);
    }
    ramBytesUsedPromise() {
        return this._java.ramBytesUsedPromise();
    }
    closeSync() {
        return this._java.closeSync();
    }
    close() {
        return this.closeSync.apply(this, arguments);
    }
    closeAsync(callback) {
        this._java.closeAsync(callback);
    }
    closePromise() {
        return this._java.closePromise();
    }
    flushSync() {
        return this._java.flushSync();
    }
    flush() {
        return this.flushSync.apply(this, arguments);
    }
    flushAsync(callback) {
        this._java.flushAsync(callback);
    }
    flushPromise() {
        return this._java.flushPromise();
    }
    numDocsSync() {
        return this._java.numDocsSync();
    }
    numDocsAsync(callback) {
        this._java.numDocsAsync(callback);
    }
    numDocsPromise() {
        return this._java.numDocsPromise();
    }
    addDocumentSync(document) {
        return this._java.addDocumentSync(node_java_rt_1.getJavaObjectOrThrow(document));
    }
    addDocument(document) {
        return this.addDocumentSync.apply(this, arguments);
    }
    addDocumentAsync(document, callback) {
        this._java.addDocumentAsync(node_java_rt_1.getJavaObjectOrThrow(document), callback);
    }
    addDocumentPromise(document) {
        return this._java.addDocumentPromise(node_java_rt_1.getJavaObjectOrThrow(document));
    }
    deleteAllSync() {
        return this._java.deleteAllSync();
    }
    deleteAll() {
        return this.deleteAllSync();
    }
    deleteAllAsync(callback) {
        this._java.deleteAllAsync(callback);
    }
    deleteAllPromise() {
        return this._java.deleteAllPromise();
    }
    deleteDocumentsSync(...queries) {
        return this._java.deleteDocumentsSync(...queries.map(node_java_rt_1.getJavaObjectOrThrow));
    }
    deleteDocuments(...queries) {
        return this.deleteDocumentsSync(...queries.map(node_java_rt_1.getJavaObjectOrThrow));
    }
    async deleteDocumentsAsync(callback, ...queries) {
        var result = await this._java.deleteDocumentsPromise(...queries.map(node_java_rt_1.getJavaObjectOrThrow));
        callback(null, result);
    }
    async deleteDocumentsPromise(...queries) {
        var result = await this._java.deleteDocumentsPromise(...queries.map(node_java_rt_1.getJavaObjectOrThrow));
        return result;
    }
    updateDocumentSync(term, doc) {
        return this._java.updateDocumentSync(node_java_rt_1.getJavaObjectOrThrow(term), node_java_rt_1.getJavaObjectOrThrow(doc));
    }
    updateDocument(term, doc) {
        return this.updateDocumentSync(node_java_rt_1.getJavaObjectOrThrow(term), node_java_rt_1.getJavaObjectOrThrow(doc));
    }
    async updateDocumentAsync(callback, term, doc) {
        var result = await this._java.updateDocumentPromise(node_java_rt_1.getJavaObjectOrThrow(term), node_java_rt_1.getJavaObjectOrThrow(doc));
        callback(null, result);
    }
    async updateDocumentPromise(term, doc) {
        var result = await this._java.updateDocumentPromise(node_java_rt_1.getJavaObjectOrThrow(term), node_java_rt_1.getJavaObjectOrThrow(doc));
        return result;
    }
}
exports.default = IndexWriter;
//# sourceMappingURL=IndexWriter.js.map