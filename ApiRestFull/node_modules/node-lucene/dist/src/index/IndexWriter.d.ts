import { Callback, lang, Long } from 'node-java-rt';
import IndexWriterConfig from './IndexWriterConfig';
import Directory from '../store/Directory';
import Query from '../search/Query';
import Term from './Term';
import { IndexableField } from './IndexableField';
export default class IndexWriter extends lang.Object {
    constructor(index: Directory, writerConfig: IndexWriterConfig);
    static _javaClassName(): string;
    ramBytesUsedSync(): Long;
    ramBytesUsedAsync(callback: Callback<Long>): void;
    ramBytesUsedPromise(): Promise<Long>;
    closeSync(): void;
    close(): void;
    closeAsync(callback: Callback<void>): void;
    closePromise(): Promise<void>;
    flushSync(): void;
    flush(): void;
    flushAsync(callback: Callback<void>): void;
    flushPromise(): Promise<void>;
    numDocsSync(): number;
    numDocsAsync(callback: Callback<number>): void;
    numDocsPromise(): Promise<number>;
    addDocumentSync<T>(document: lang.Iterable<T>): Long;
    addDocument<T>(document: lang.Iterable<T>): Long;
    addDocumentAsync<T>(document: lang.Iterable<T>, callback: Callback<Long>): void;
    addDocumentPromise<T>(document: lang.Iterable<T>): Promise<Long>;
    deleteAllSync(): Long;
    deleteAll(): Long;
    deleteAllAsync(callback: Callback<Long>): void;
    deleteAllPromise(): Promise<Long>;
    deleteDocumentsSync(...queries: (Query | Term)[]): Long;
    deleteDocuments(...queries: (Query | Term)[]): Long;
    deleteDocumentsAsync(callback: Callback<Long>, ...queries: (Query | Term)[]): Promise<void>;
    deleteDocumentsPromise(...queries: (Query | Term)[]): Promise<Long>;
    updateDocumentSync(term: Term, doc: lang.Iterable<IndexableField>): Long;
    updateDocument(term: Term, doc: lang.Iterable<IndexableField>): Long;
    updateDocumentAsync(callback: Callback<Long>, term: Term, doc: lang.Iterable<IndexableField>): Promise<void>;
    updateDocumentPromise(term: Term, doc: lang.Iterable<IndexableField>): Promise<Long>;
}
