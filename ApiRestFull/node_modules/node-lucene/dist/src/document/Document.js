"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_java_rt_1 = require("node-java-rt");
const getLuceneJava_1 = require("../util/getLuceneJava");
const IndexableFieldBase_1 = require("../index/IndexableFieldBase_");
/**
 * Documents are the unit of indexing and search. A Document is a set of fields. Each field has a name and a
 * textual value. A field may be stored with the document, in which case it is returned with search hits on
 * the document. Thus each document should typically contain one or more stored fields which uniquely identify
 * it.
 *
 * Note that fields which are not stored are not available in documents retrieved from the index, e.g. with
 * ScoreDoc.doc or IndexReader.document(int).
 */
class Document extends node_java_rt_1.lang.Object {
    static _javaClassName() {
        return 'org.apache.lucene.document.Document';
    }
    constructor() {
        super();
        this._java = getLuceneJava_1.getLuceneJava().newInstanceSync(Document._javaClassName());
    }
    removeFieldSync(fieldName) {
        return this._java.removeFieldSync(fieldName);
    }
    removeField(fieldName) {
        return this.removeFieldSync(fieldName);
    }
    removeFieldAsync(fieldName, callback) {
        this._java.removeFieldAsync(fieldName, callback);
    }
    removeFieldPromise(fieldName) {
        return this._java.removeFieldPromise(fieldName);
    }
    addSync(field) {
        return this._java.addSync(Document._getNative(field));
    }
    add(field) {
        return this._java.addSync(Document._getNative(field));
    }
    addAsync(field, callback) {
        this._java.addAsync(Document._getNative(field), callback);
    }
    addPromise(field) {
        return this._java.addPromise(Document._getNative(field));
    }
    iterator() {
        throw new Error('not implemented');
    }
    getFieldSync(fieldName) {
        return Document._buildSync(this._java.getFieldSync(fieldName), new IndexableFieldBase_1.IndexableFieldBase_());
    }
    getField(fieldName) {
        return this.getFieldSync(fieldName);
    }
    getFieldAsync(fieldName, callback) {
        return Document._buildAsync(this._java.getFieldAsync(fieldName, callback), new IndexableFieldBase_1.IndexableFieldBase_());
    }
    getFieldPromise(fieldName) {
        return Document._buildPromise(this._java.getFieldPromise(fieldName), new IndexableFieldBase_1.IndexableFieldBase_());
    }
    /**
     * Returns the string value of the field with the given name if any exist in this document, or null.
     */
    get(name) {
        return this._java.getSync(name);
    }
    getSync(name) {
        return this._java.getSync(name);
    }
    async getPromise(name) {
        return this._java.getPromise(name);
    }
}
exports.default = Document;
//# sourceMappingURL=Document.js.map