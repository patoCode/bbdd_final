import { Callback, lang, util } from 'node-java-rt';
import { IndexableField } from '../index/IndexableField';
/**
 * Documents are the unit of indexing and search. A Document is a set of fields. Each field has a name and a
 * textual value. A field may be stored with the document, in which case it is returned with search hits on
 * the document. Thus each document should typically contain one or more stored fields which uniquely identify
 * it.
 *
 * Note that fields which are not stored are not available in documents retrieved from the index, e.g. with
 * ScoreDoc.doc or IndexReader.document(int).
 */
export default class Document extends lang.Object implements lang.Iterable<IndexableField> {
    static _javaClassName(): string;
    constructor();
    removeFieldSync(fieldName: string): void;
    removeField(fieldName: string): void;
    removeFieldAsync(fieldName: string, callback: Callback<void>): void;
    removeFieldPromise(fieldName: string): Promise<void>;
    addSync(field: IndexableField): void;
    add(field: IndexableField): void;
    addAsync(field: IndexableField, callback: Callback<void>): void;
    addPromise(field: IndexableField): Promise<void>;
    iterator(): util.Iterator<IndexableField>;
    getFieldSync(fieldName: string): (IndexableField & lang.Object) | null;
    getField(fieldName: string): (IndexableField & lang.Object) | null;
    getFieldAsync(fieldName: string, callback: Callback<(IndexableField & lang.Object) | null>): (error: any, javaObject: any) => void;
    getFieldPromise(fieldName: string): Promise<(IndexableField & lang.Object) | null>;
    /**
     * Returns the string value of the field with the given name if any exist in this document, or null.
     */
    get(name: string): string;
    getSync(name: string): string;
    getPromise(name: string): Promise<string>;
}
