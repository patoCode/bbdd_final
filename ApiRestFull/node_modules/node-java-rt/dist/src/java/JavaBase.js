"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const java_1 = require("./java");
class JavaBase {
    /** @internal */
    static _javaClassName() {
        throw new Error('Must be implemented by subclass class');
    }
    /** @internal */
    static _buildSync(javaObject, instance) {
        if (javaObject !== undefined && javaObject !== null && instance) {
            instance = typeof instance === 'function' ? instance() : instance;
            instance._java = javaObject;
            return instance;
        }
        else {
            return null;
        }
    }
    /** @internal */
    static _buildSyncOrThrow(javaObject, instance) {
        if (javaObject !== undefined && javaObject !== null && instance) {
            instance = typeof instance === 'function' ? instance() : instance;
            instance._java = javaObject;
            return instance;
        }
        else {
            throw new Error('Expected javaObject to be defined');
        }
    }
    /** @internal */
    static _buildAsync(callback, instance) {
        return (error, javaObject) => callback(error, this._buildSync(javaObject, instance));
    }
    /** @internal */
    static _buildPromise(p, instance) {
        return new Promise((resolve, reject) => {
            p.then(javaObject => resolve(this._buildSync(javaObject, instance))).catch(error => reject(error));
        });
    }
    /** @internal */
    static _buildArraySync(javaArray, createInstance) {
        const arr = [];
        const length = javaArray.length;
        for (let i = 0; i < length; i++) {
            const javaObject = javaArray[i];
            arr.push(JavaBase._buildSyncOrThrow(javaObject, createInstance()));
        }
        return arr;
    }
    /** @internal */
    static _buildJavaArray(jsArray, className) {
        return java_1.getJava().newArray(className, jsArray.map(i => i._java));
    }
    static _getNative(v) {
        return v._java || v;
    }
}
exports.JavaBase = JavaBase;
//# sourceMappingURL=JavaBase.js.map