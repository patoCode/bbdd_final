import { IJavaBase } from './IJavaBase';
import { Callback } from './types';
export declare abstract class JavaBase implements IJavaBase {
    /** @internal */
    abstract _javaClassName(): string;
    /** @internal */
    static _javaClassName(): string;
    /**
     * Reference to the Java Object associated with this instance
     * @internal
     * */
    _java: any;
    /** @internal */
    protected static _buildSync<T extends JavaBase>(javaObject: any, instance: T | InstanceCreator<T>): T | null;
    /** @internal */
    protected static _buildSyncOrThrow<T extends JavaBase>(javaObject: any, instance: T | InstanceCreator<T>): T;
    /** @internal */
    protected static _buildAsync<T extends JavaBase>(callback: Callback<T | null>, instance: T | InstanceCreator<T>): (error: any, javaObject: any) => void;
    /** @internal */
    protected static _buildPromise<T extends JavaBase>(p: Promise<any>, instance: T | InstanceCreator<T>): Promise<T | null>;
    /** @internal */
    static _buildArraySync<T extends JavaBase>(javaArray: any, createInstance: InstanceCreator<T>): T[];
    /** @internal */
    static _buildJavaArray<T extends JavaBase>(jsArray: T[], className: string): any;
    static _getNative(v: any): any;
}
export declare type InstanceCreator<T> = () => T;
