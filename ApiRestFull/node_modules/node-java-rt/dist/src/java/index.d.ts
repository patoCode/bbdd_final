export * from './java';
export * from './types';
export * from './JavaBase';
export * from './IJavaBase';
import ObjectT from './lang/Object';
import IterableT from './lang/Iterable';
import ComparableT from './lang/Comparable';
import AutoCloseableT from './lang/AutoCloseable';
import EnumT from './lang/Enum';
import RunnableT from './lang/Runnable';
import RuntimeT from './lang/Runtime';
import ClassLoaderT from './lang/ClassLoader';
import ClassT from './lang/Class';
import DoubleT from './lang/Double';
import ProxyT from './lang/reflect/Proxy';
import MethodT from './lang/reflect/Method';
import InvocationHandlerT from './lang/reflect/InvocationHandler';
export declare namespace lang {
    type Double = DoubleT;
    type Class<T> = ClassT<T>;
    type ClassLoader = ClassLoaderT;
    type Runtime = RuntimeT;
    type Enum<E> = EnumT<E>;
    type Object = ObjectT;
    type Runnable = RunnableT;
    type Iterable<E> = IterableT<E>;
    type Comparable<E> = ComparableT<E>;
    type AutoCloseable = AutoCloseableT;
    namespace reflect {
        type Proxy = ProxyT;
        type Method = MethodT;
        type InvocationHandler = InvocationHandlerT;
    }
}
export declare const lang: {
    Double: typeof DoubleT;
    Object: typeof ObjectT;
    ClassLoader: typeof ClassLoaderT;
    Class: typeof ClassT;
    Enum: typeof EnumT;
    Runtime: typeof RuntimeT;
    reflect: {
        Method: typeof MethodT;
        Proxy: typeof ProxyT;
    };
};
import LinkedListT from './util/LinkedList';
import EventObjectT from './util/EventObject';
import IteratorT from './util/Iterator';
import EnumerationT from './util/Enumeration';
import EventListenerT from './util/EventListener';
import MapT from './util/Map';
export declare namespace util {
    type Map<K, V> = MapT<K, V>;
    type EventObject = EventObjectT;
    type LinkedList<T> = LinkedListT<T>;
    type Iterator<T> = IteratorT<T>;
    type Enumeration<T> = EnumerationT<T>;
    type EventListener = EventListenerT;
}
export declare const util: {
    LinkedList: typeof LinkedListT;
    EventObject: typeof EventObjectT;
};
import CloseableT from './io/Closeable';
export declare namespace io {
    type Closeable = CloseableT;
}
export declare const io: {};
import PathsT from './nio/file/Paths';
import PathT from './nio/file/Path';
export declare namespace nio {
    namespace file {
        type Path = PathT;
        type Paths = PathsT;
    }
}
export declare const nio: {
    file: {
        Paths: typeof PathsT;
    };
};
import BigIntegerT from './math/BigInteger';
export declare namespace math {
    type BigInteger = BigIntegerT;
}
export declare const math: {
    BigInteger: typeof BigIntegerT;
};
