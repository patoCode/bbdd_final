"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Object_1 = __importDefault(require("../Object"));
// import ClassLoader from '../ClassLoader';
// import Class from '../Class';
// import InvocationHandler from './InvocationHandler';
const java_1 = require("../../java");
class Proxy extends Object_1.default /* TODO: implements Serializable */ {
    /**
     *
     *
  Java Example Call:
  invoke
  ```
  Map proxyInstance = (Map) Proxy.newProxyInstance(
    ProxyTest1.class.getClassLoader(),
    new Class[] { Map.class },
    new InvocationHandler(){
      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("Invoked method: {} " + method.getName());
      return 42;
      }
    };
    new ProxyTest1()
  );
  proxyInstance.put("hello", "world");
  ```
  
     * @param loader
     * @param interfaces
     * @param h
     */
    static newProxyInstance(loader, interfaces, h, instance) {
        const interfaceArray = java_1.getJava().newArray('java.lang.Class', interfaces.map(i => i._java));
        const invocationHandler = java_1.getJava().newProxy('java.lang.reflect.InvocationHandler', h);
        const obj = java_1.getJava().callStaticMethodSync('java.lang.reflect.Proxy', 'newProxyInstance', loader._java, interfaceArray, invocationHandler);
        // if (!instance) {
        //   return obj
        // }
        // instance = typeof instance==='function' ? instance() : instance
        return Proxy._buildSyncOrThrow(obj, instance);
    }
}
exports.default = Proxy;
//# sourceMappingURL=Proxy.js.map